/*
 Time Complixity :-  2n;
 space com :- n;
*/

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

===============================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int length(ListNode *head) {
        if (head == NULL) {
            return 0;
        }
        return 1 + length(head->next);
    }
    
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        if (head == NULL) 
            return NULL;
        
        int len = length(head);
        ListNode *temp = head;
        n = len - n;
        int count = 0;
        
        if (n == 0) {
            return head->next;
        }
        
        while (temp != NULL && count < n-1) {
            temp = temp->next;
            count++;
        }
        
        if(temp == NULL && temp->next == NULL) {
            return head;
        }
        
        temp->next = temp->next->next;
        return head;
    }
};

-------------------------------------------------------------------------------------------
/*
T.C  :-  (n)
S.C  :- 1
*/
class Solution {
public:
    int length(ListNode *head) {
        if (head == NULL) {
            return 0;
        }
        return 1 + length(head->next);
    }
    
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        if (head == NULL) 
            return NULL;
        
        ListNode * start = new ListNode(); 
        start->next = head;
        ListNode *fast = start;
        ListNode *slow = start;
        int count =1;
        
        while( count<=n) {
            count++;
            fast = fast->next;
        }
        
        while(fast->next != NULL) {
            fast = fast->next;
            slow = slow->next;
        }
       
       
        slow->next = slow->next->next;
        return start->next;
    }
};
