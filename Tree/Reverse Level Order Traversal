Given a binary tree of size N, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10

Your Task: 
You dont need to read input or print anything. Complete the function reverseLevelOrder() which takes the root of the tree as input parameter and returns a list containing the reverse level order traversal of the given tree.


-------------------------------------------------------------



#include<queue>
vector<int> reverseLevelOrder(Node *root)
{
    // code here
   vector<int> ans;
    if(root==NULL) 
        return ans;

    // vector<int> ans;
    queue<Node*> st;
    st.push(root);

    while(st.size()) {
       Node *temp = st.front();
       ans.push_back(temp->data);
       st.pop();

        if(temp->right) 
            st.push(temp->right);

        if(temp->left) 
            st.push(temp->left);
    }

    reverse(ans.begin(),ans.end());
    return ans;
    
   
}
