Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 







==================================================


void swap(int *x, int *y)
{

    int temp = *x;
    *x = *y;
    *y = temp;
}
int partition(int arr[], int l, int h)
{
    int i = l, j = h;
    int pivot = arr[l];
    while (i < j)
    {
        while (arr[i] <= pivot)
        {
            i++;
        }
        while (arr[j] > pivot)
        {
            j--;
        }
        if (i < j)
        {
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[l], &arr[j]);
    return j;
}


void quickSort(int arr[], int l, int h)
{
    if (l < h)
    {
        int m = partition(arr, l, h);
        quickSort(arr, l, m - 1);
        quickSort(arr, m + 1, h);
    }
}

void quickSort(int input[], int size) {
quickSort(input,0,size-1);
}
